apply plugin: 'kotlin-platform-js'
apply plugin: 'com.moowork.node'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    expectedBy project(":atomicfu-common")
    
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

tasks.withType(compileKotlin2Js.getClass()) {
    kotlinOptions {
        moduleKind = "umd"
        sourceMap = true
        metaInfo = true
        // drop -js suffix from outputFile
        def baseName = project.name - "-js"
        outputFile = new File(outputFile.parent, baseName + ".js")
    }
}

// Configures testing for JS modules

node {
    version = "$node_version"
    npmVersion = "$npm_version"
    download = true
    nodeModulesDir = file(buildDir)
}

task prepareNodePackage(type: Copy) {
    from("npm") {
        include 'package.json'
        expand project.properties
    }
    from("npm") {
        exclude 'package.json'
    }
    into "$node.nodeModulesDir"
}

npmInstall.dependsOn prepareNodePackage

task populateNodeModules(type: Copy, dependsOn: [compileKotlin2Js]) {
    from compileKotlin2Js.destinationDir
    into "$node.nodeModulesDir/node_modules"

    afterEvaluate {
        configurations.testCompile.each {
            if (it.absolutePath.endsWith(".jar")) {
                from zipTree(it.absolutePath).matching {
                    include '*.js'
                    include '*.js.map'
                }
            }
        }
    }
}

npmInstall.dependsOn populateNodeModules

task installDependenciesMochaNode(type: NpmTask, dependsOn: [npmInstall]) {
    args = ['install',
            "mocha@$mocha_version",
            "source-map-support@$source_map_support_version",
            '--no-save']
    if (project.hasProperty("teamcity")) args += [
            "mocha-teamcity-reporter@$mocha_teamcity_reporter_version"]
}

task testMochaNode(type: NodeTask, dependsOn: [compileTestKotlin2Js, installDependenciesMochaNode]) {
    script = file("$node.nodeModulesDir/node_modules/mocha/bin/mocha")
    args = [compileTestKotlin2Js.outputFile, '--require', 'source-map-support/register']
    if (project.hasProperty("teamcity")) args += ['--reporter', 'mocha-teamcity-reporter']
}

test.dependsOn testMochaNode

